properties 
	# Application URL
    # development 
    APPLICATION_BASE_URL http://localhost:8080/
    # production
    #APPLICATION_BASE_URL http://www.figgo.com.br/
    
    # Figgo properties
    # Used in test env to indicate admin manager to not use Route53
    # for production environment, just comment the line bellow
    NOT_USE_ROUTE53	true
    # Authorization Domain - to be used by google authentication
    AUTHORIZATION_DOMAIN figgo.com.br
    
dependencies
	# Dependencies should be declared before any class instantiation, it means,
	# before interceptors, bootloaders and controllers block 
	# maps dependencies (interface -> implementation)
    br.octahedron.cotopaxi.eventbus.EventPublisher br.octahedron.cotopaxi.eventbus.AppEngineEventPublisher
    br.octahedron.cotopaxi.datastore.namespace.NamespaceManager br.octahedron.cotopaxi.datastore.namespace.AppEngineNamespaceManager

interceptors
    # Controller Interceptors
  	# Controller interceptors should be declared in execution order
    br.octahedron.figgo.modules.user.controller.AuthenticationInterceptor
    br.octahedron.figgo.modules.authorization.controller.AuthorizationInterceptor
    br.octahedron.cotopaxi.datastore.namespace.SubdomainNamespaceInterceptor
	# Response Interceptors
    #br.octahedron.cotopaxi.view.GzipInterceptor
    br.octahedron.cotopaxi.datastore.jdo.PersistenceManagerInterceptor


bootloaders
	# Subscribers bootloader
	br.octahedron.figgo.SubscribersBootloader
    
controllers
	# Index controller
 	br.octahedron.figgo.IndexController
 		/		get		index
 	
 	# User controller
	br.octahedron.figgo.modules.user.controller.UserController
    	/user/new			get		NewUser
    	/user/new			post	CreateUser
    	/user/edit			get		EditUser
    	/user/edit			post	UpdateUser
    	/user/search/{term}	post	SearchUser
    	/dashboard			get		DashboardUser
    
    # Admin controller
    br.octahedron.figgo.modules.admin.controller.AdminController
    	/admin/config		get		AppConfig
    	/admin/config		post	AppConfig
    	/admin/domain/new	get		CreateDomain
    	/admin/domain/new	post	CreateDomain
    
    # Authorization controller
	br.octahedron.figgo.modules.authorization.controller.AuthorizationController
    	/roles					get		ListRoles
    	/users					get		ListUsers
    	
    	/roles/new				get		NewRole
    	/roles/new				post	NewRole
    	/roles/edit/{role}		get		EditRole
    	/roles/edit/{role}		post	EditRole
    	/roles/delete/{role}	post	RemoveRole
    	
        /roles/user/edit        get     EditUserRoles
        /roles/user/add		    post    AddUserRole
        /roles/user/del 		post    RemoveUserRole
        /roles/user/remove		post    RemoveUserRoles

    	
    # Upload controller
	br.octahedron.figgo.modules.upload.controller.UploadController
    	/serve/{key}		get		ServeBlob
    	/user/upload		get		UserUpload
    	/user/upload		post	UserUpload
    	/domain/upload		get		DomainUpload
    	/domain/upload		post	DomainUpload
	
	# Domain/Configuration controller
	br.octahedron.figgo.modules.configuration.controller.ConfigurationController
    	/domain/edit			get		EditDomain
    	/domain/edit			post	UpdateDomain
    	/domain/list			get		ListDomain
    	/domain/module/{module}	get		ModuleDomain
    	/domain/module/{module}	post	ModuleDomain
   
	# Bank controller  	
  	br.octahedron.figgo.modules.bank.controller.BankController
    	/bank			get		IndexBank
    	/bank/transfer	get		TransferBank
    	/bank/transfer	post	TransferBank
    	/bank/statement	get		StatementBank
    	/bank/statement	post	TransactionsBank
    	/bank/stats		get		StatsBank
    	
    # Bank admin controller
    br.octahedron.figgo.modules.bank.controller.BankAdminController
    	/bank/admin		get		AdminBank
    	/bank/share		post	ShareBank
    	/bank/ballast	post	BallastBank
    	
    # Services controller
	br.octahedron.figgo.modules.service.controller.ServiceController
		# users operations
    	/services							get		ListServices
    	/service/{name}/show				get		ShowService
    	/service/{name}/provider/new		post	AddProvider
    	/service/{name}/provider/delete		post	RemoveProvider
    	
    	# admin operations
    	/service/new						get		NewService
    	/service/new						post	NewService
    	/service/{name}/edit				get		EditService
    	/service/{name}/edit				post	EditService
    	/service/{name}/delete				post	RemoveService
    	
		# refactor -> ServicesContractController
    	/services/contracts					get		ShowContracts
    	/services/contracts/history			get		ShowHistory
    	/services/contract/{id}/edit		get		EditContract
    	/services/contract/{id}/edit		post	UpdateContract
    	/service/{name}/contract/{provider}	post	RequestContract
